# -*- coding: utf-8 -*-
from asyncio import sleep, create_task
from telethon import functions, types
from .. import loader, utils
import random

__version__ = (1, 0, 3)

#‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñà‚ñÄ‚ñë‚ñà‚ñÄ‚ñÑ‚ñë‚ñà‚ñÄ‚ñÄ
#‚ñë‚ñÑ‚ñÄ‚ñÑ‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñë‚ñà‚ñë‚ñÄ‚ñÄ‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñÄ‚ñÄ
#‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñë‚ñë‚ñÄ‚ñÄ‚ñÄ

# üîí Licensed under the AGPL-3.0
# ü•± Im not allowing to edit this module.
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# meta developer: @XenSideMOD

@loader.tds
class ImitateMod(loader.Module):
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ """

    strings = {
        "name": "Imitate",
        "imitate_started": "<blockquote>‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è '{}' –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∑–∞–ø—É—â–µ–Ω–∞</blockquote>",
        "imitate_stopped": "<blockquote>üõë –ò–º–∏—Ç–∞—Ü–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</blockquote>",
        "imitate_invalid": "<blockquote>‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è. –ü—Ä–∏–º–µ—Ä: .imitate typing</blockquote>",
        "imitate_already": "<blockquote>‚ö†Ô∏è –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–º–∏—Ç–∞—Ü–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π .simit</blockquote>",
        "imitate_unknown": "<blockquote>‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {}</blockquote>"
    }

    def __init__(self):
        self.tasks = {}
        self.actions = [
            "typing", "voice", "game", "video", "photo", 
            "document", "location", "record-video", "record-audio", 
            "record-round", "scrn", "mixed"
        ]

    async def imitatecmd(self, message):
        """–¢–∏–ø—ã: typing, voice, game, video, photo, document, location, record-video, record-audio, record-round, scrn, mixed"""
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, self.strings["imitate_invalid"])
            return

        action = args[0].lower()
        chat_id = message.chat_id
        if chat_id in self.tasks and not self.tasks[chat_id].done():
            await utils.answer(message, self.strings["imitate_already"])
            return

        if action not in self.actions:
            await utils.answer(message, self.strings["imitate_unknown"].format(", ".join(self.actions)))
            return

        if action == "scrn":
            await message.client(functions.messages.SendScreenshotNotificationRequest(
                peer=message.to_id,
                reply_to=types.InputReplyToMessage(reply_to_msg_id=message.id)
            ))
            await message.delete()
            return

        async def run_single_action():
            try:
                while True:
                    async with message.client.action(chat_id, action):
                        await sleep(1)
            except:
                return

        async def run_mixed_action():
            try:
                mixed_actions = [a for a in self.actions if a not in ["mixed", "scrn"]]
                while True:
                    current_action = random.choice(mixed_actions)
                    async with message.client.action(chat_id, current_action):
                        await sleep(1)
            except:
                return

        if action == "mixed":
            task = create_task(run_mixed_action())
        else:
            task = create_task(run_single_action())
        self.tasks[chat_id] = task
        
        await utils.answer(message, self.strings["imitate_started"].format(action))

    async def simitcmd(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –°–í–û"""
        chat_id = message.chat_id
        if chat_id in self.tasks and not self.tasks[chat_id].done():
            self.tasks[chat_id].cancel()
            del self.tasks[chat_id]
            await utils.answer(message, self.strings["imitate_stopped"])
        else:
            await message.delete()