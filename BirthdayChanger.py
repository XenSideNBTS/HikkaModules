import asyncio
from datetime import datetime, timedelta, timezone

from telethon.tl.functions.account import UpdateBirthdayRequest
from telethon.tl.types import Birthday

from .. import loader, utils

#‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñà‚ñÄ‚ñë‚ñà‚ñÄ‚ñÑ‚ñë‚ñà‚ñÄ‚ñÄ
#‚ñë‚ñÑ‚ñÄ‚ñÑ‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñë‚ñà‚ñë‚ñÄ‚ñÄ‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñÄ‚ñÄ
#‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñë‚ñë‚ñÄ‚ñÄ‚ñÄ

# üîí Licensed under the AGPL-3.0
# ü•± Im not allowing to edit this module.
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# meta developer: @XenSideMOD

@loader.tds
class BirthdayChangerMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤–∞–º –≤—Å–µ–≥–¥–∞ –±—ã–ª –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç."""

    strings = {
        "name": "BirthdayChanger",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "enabled",
                False,
                "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "age",
                69,
                "–í–æ–∑—Ä–∞—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è (–æ—Ç 1 –¥–æ 146)",
                validator=loader.validators.Integer(minimum=1, maximum=146),
            ),
        )
        self.moscow_tz = timezone(timedelta(hours=3))
        self.task = None

    async def client_ready(self, client, db):
        self._client = client
        if self.config["enabled"]:
            self.task = asyncio.create_task(self._birthday_loop())

    async def _update_birthday(self, target_date=None):
        if target_date is None:
            target_date = datetime.now(self.moscow_tz).date()

        birth_year = target_date.year - self.config["age"]
        birthday = Birthday(day=target_date.day, month=target_date.month, year=birth_year)
        try:
            await self._client(UpdateBirthdayRequest(birthday=birthday))
        except Exception:
            pass
            
    def _get_next_midnight(self):
        now_msk = datetime.now(self.moscow_tz)
        tomorrow_msk = (now_msk + timedelta(days=1)).date()
        return datetime.combine(tomorrow_msk, datetime.min.time(), tzinfo=self.moscow_tz)

    async def _birthday_loop(self):
        await self._update_birthday()
        while True:
            now_msk = datetime.now(self.moscow_tz)
            next_midnight = self._get_next_midnight()
            
            update_time = next_midnight - timedelta(minutes=1)

            if update_time < now_msk:
               next_midnight += timedelta(days=1)
               update_time = next_midnight - timedelta(minutes=1)

            sleep_seconds = (update_time - now_msk).total_seconds()
            await asyncio.sleep(sleep_seconds)
            
            await self._update_birthday(target_date=next_midnight.date())
            
            await asyncio.sleep(61)

    def _get_remaining_time_str(self):
        now_msk = datetime.now(self.moscow_tz)
        next_midnight = self._get_next_midnight()
        update_time = next_midnight - timedelta(minutes=1)

        if update_time < now_msk:
            next_midnight += timedelta(days=1)
            update_time = next_midnight - timedelta(minutes=1)

        remaining = update_time - now_msk
        
        hours, remainder = divmod(remaining.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{hours:02}:{minutes:02}:{seconds:02}"

    async def bcstartcmd(self, message):
        """<–≤–æ–∑—Ä–∞—Å—Ç> - –í–∫–ª—é—á–∞–µ—Ç/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º."""
        args = utils.get_args_raw(message)
        new_age_set = False
        
        if args:
            try:
                new_age = int(args)
                if not 0 < new_age < 147:
                    raise ValueError
                
                if new_age != self.config["age"]:
                    self.config["age"] = new_age
                    new_age_set = True
                
            except ValueError:
                await utils.answer(message, "<blockquote><emoji document_id=5278578973595427038>üö´</emoji> <b>–ù–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.</b> –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 146.</blockquote>")
                return

        is_running = self.task and not self.task.done()
        
        if is_running and not new_age_set:
            await utils.answer(message, self._status_message())
            return
            
        if is_running:
            self.task.cancel()
        
        await self._update_birthday()
        
        self.config["enabled"] = True
        self.task = asyncio.create_task(self._birthday_loop())
        
        await utils.answer(message, self._status_message(started=True))

    def _status_message(self, started=False):
        time_str = self._get_remaining_time_str()
        
        if started:
            header = "<emoji document_id=5278753302023004775>‚ÑπÔ∏è</emoji> <b>–¶–∏–∫–ª –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ.</b>"
            age_line = f"<emoji document_id=5206476089127372379>‚≠êÔ∏è</emoji> <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç:</b> <code>{self.config['age']}</code>"
        else:
            header = "<emoji document_id=5278753302023004775>‚ÑπÔ∏è</emoji> <b>–¶–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω.</b>"
            age_line = f"<emoji document_id=5206476089127372379>‚≠êÔ∏è</emoji> <b>–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç:</b> <code>{self.config['age']}</code>"
            
        return (
            f"<blockquote>{header}\n"
            f"{age_line}\n"
            f"<emoji document_id=5276412364458059956>üïì</emoji> <b>–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å:</b> <code>{time_str}</code></blockquote>"
        )

    async def bcstopcmd(self, message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è."""
        if not self.task or self.task.done():
            await utils.answer(message, "<blockquote><emoji document_id=5278753302023004775>‚ÑπÔ∏è</emoji> <b>–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.</b></blockquote>")
            return

        self.config["enabled"] = False
        self.task.cancel()
        self.task = None
        await utils.answer(message, "<blockquote><emoji document_id=5278753302023004775>‚ÑπÔ∏è</emoji> <b>–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b></blockquote>")
